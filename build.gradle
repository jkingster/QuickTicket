plugins {
  id 'java'
  id 'application'
  id 'org.javamodularity.moduleplugin' version '1.8.12'
  id 'org.openjfx.javafxplugin' version '0.0.13'
  id 'org.beryx.jlink' version '3.0.1'
  id "org.flywaydb.flyway" version "10.10.0"
  id 'nu.studer.jooq' version '8.2'
}

group 'io.jacobking'
version '1.0-SNAPSHOT'

repositories {
  mavenCentral()
  maven {
    url "https://jitpack.io"
  }
}

ext {
  junitVersion = '5.10.0'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

application {
  mainModule = 'io.jacobking.quickticket'
  mainClass = 'io.jacobking.quickticket.App'
}

javafx {
  version = '17.0.6'
  modules = ['javafx.controls', 'javafx.fxml', 'javafx.swing']
}

sourceSets {
  main {
    java {
      srcDirs += 'build/generated-src/jooq'
    }
  }
}


dependencies {
  implementation group: 'org.controlsfx',              name: 'controlsfx',       version: '11.1.2'
  implementation group: 'com.sun.mail',                name: 'javax.mail',       version: '1.6.2'
  implementation group: 'org.xerial',                  name: 'sqlite-jdbc',      version: '3.42.0.0'
  implementation group: 'com.google.code.gson',        name: 'gson',             version: '2.10.1'
  implementation group: 'ch.qos.logback',              name: 'logback-classic',  version: '1.5.4'
  implementation group: 'org.flywaydb',                name: 'flyway-core',      version: '10.10.0'
  implementation group: 'com.fasterxml.jackson.core',  name: 'jackson-databind', version: '2.16.1'
  implementation group: 'org.slf4j',                   name: 'slf4j-api',        version: '1.7.36'
  implementation group: 'commons-io',                  name: 'commons-io',       version: '2.15.0'
  implementation group: 'net.lingala.zip4j',           name: 'zip4j',           version: '2.11.5'

  jooqGenerator 'org.xerial:sqlite-jdbc:3.42.0.0'
}

jlink {
  forceMerge("slf4j")
  imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
  options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
  launcher {
    name = 'QuickTicket'
    version = "1.0.3"
    description = "Free-to-use ticket management solution aimed to streamline ticket support services."
  }
  jpackage {
    installerOptions = [
            '--description', 'A lightweight application to streamline the process of logging and managing IT support-related tickets locally on your machine.',
            '--copyright', 'Copyright 2024-2025 Jacob King',
            '--win-dir-chooser',
            '--win-menu', '--win-shortcut-prompt',
            '--win-update-url', 'https://www.github.com/jkingster/QuickTicket',
            '--vendor', 'Jacob King',
            '--app-version', '1.0.3',
    ]
    imageOptions += ['--icon', 'src/main/resources/io/jacobking/quickticket/icons/quickticket-icon.ico']
    installerType = project.findProperty('installerType')
  }
}

jlinkZip {
  group = 'distribution'
}

import nu.studer.gradle.jooq.JooqEdition
import org.jooq.meta.jaxb.Logging

def generatedSourcesDir = file("${buildDir}/generated-src/jooq")

jooq {
  version = '3.18.6'  // default (can be omitted)
  edition = JooqEdition.OSS  // default (can be omitted)

  configurations {
    main {  // name of the jOOQ configuration
      generateSchemaSourceOnCompilation = false  // default (can be omitted)

      generationTool {
        logging = Logging.WARN
        jdbc {
          driver = 'org.sqlite.JDBC'
          url = 'jdbc:sqlite:development.db'
        }
        generator {
          name = 'org.jooq.codegen.DefaultGenerator'
          database {
            name = 'org.jooq.meta.sqlite.SQLiteDatabase'
          }
          generate {
            deprecated = false
            records = true
            pojos = true
            fluentSetters = true
          }
          target {
            packageName = 'io.jacobking.quickticket'
            directory = '/build/generated-src/jooq'
          }
          strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
        }
      }
    }
  }
}

task postProcessGeneratedPojos {
  dependsOn generateJooq

  doLast {
    // Get the directory where POJOs are generated
    def pojosDir = file("${generatedSourcesDir}/io/jacobking/quickticket/tables/pojos")

    // Iterate through each generated file
    pojosDir.eachFile { generatedFile ->
      // Read the contents of the file
      def content = generatedFile.text

      // Append extends your base class
      // Append extends your base class and import statement
      content = content.replaceAll('public class (\\w+)\\b', 'import io.jacobking.quickticket.core.database.repository.Entity;\n\npublic class $1 extends Entity')

      // Remove @SuppressWarnings annotation
      content = content.replaceAll('@SuppressWarnings\\(\\{.*?\\}\\)', '')

      // Write the modified content back to the file
      generatedFile.write(content)

      // Write the modified content back to the file
    }
  }
}

// Make the compileJava task depend on postProcessGeneratedPojos
compileJava.dependsOn(postProcessGeneratedPojos)